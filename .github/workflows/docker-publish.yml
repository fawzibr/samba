name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch:
  schedule:
    - cron: '24 22 * * *'
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  DOCKER_REGISTRY: ghcr.io/fawzibr
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0
        
      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: New version needed?
        id: docker_version_check
        run: |
          ./build.sh version-check && echo "tag=true" >> $GITHUB_OUTPUT || echo "tag=false" >> $GITHUB_OUTPUT

      - name: Extract Docker Version Tag
        if: ${{ steps.docker_version_check.outputs.tag == 'true' }}
        id: docker_version_tag
        run: |
          ./get-version.sh $(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:" | tr '[:upper:]' '[:lower:]') | sed 's/^/tag=/g' >> $GITHUB_OUTPUT
          ./get-version.sh $(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:smbd-only-" | tr '[:upper:]' '[:lower:]') | sed 's/^/smbd_only_tag=/g' >> $GITHUB_OUTPUT
          ./get-version.sh $(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:smbd-avahi-" | tr '[:upper:]' '[:lower:]') | sed 's/^/smbd_avahi_tag=/g' >> $GITHUB_OUTPUT
          ./get-version.sh $(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:smbd-wsdd2-" | tr '[:upper:]' '[:lower:]') | sed 's/^/smbd_wsdd2_tag=/g' >> $GITHUB_OUTPUT

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        if: ${{ steps.docker_version_check.outputs.tag == 'true' }}
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_version_tag.outputs.tag }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: ${{ steps.docker_version_check.outputs.tag == 'true' }}
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build-and-push.outputs.digest }}


      - name: Prepare Docker variations
        if: ${{ steps.docker_version_check.outputs.tag == 'true' }}
        run: |
          ./generate-variants.sh

      - name: Build and push Docker image - smbd-only
        if: ${{ steps.docker_version_check.outputs.tag == 'true' }}
        id: build-and-push-smbd-only
        uses: docker/build-push-action@v5
        with:
          context: variants/smbd-only
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_version_tag.outputs.smbd_only_tag }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image - smbd-only
        if: ${{ steps.docker_version_check.outputs.tag == 'true' }}
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build-and-push-smbd-only.outputs.digest }}


      - name: Build and push Docker image - smbd-avahi
        if: ${{ steps.docker_version_check.outputs.tag == 'true' }}
        id: build-and-push-smbd-avahi
        uses: docker/build-push-action@v5
        with:
          context: variants/smbd-avahi
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_version_tag.outputs.smbd_avahi_tag }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image - smbd-avahi
        if: ${{ steps.docker_version_check.outputs.tag == 'true' }}
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build-and-push-smbd-avahi.outputs.digest }}


      - name: Build and push Docker image - smbd-wsdd2
        if: ${{ steps.docker_version_check.outputs.tag == 'true' }}
        id: build-and-push-smbd-wsdd2
        uses: docker/build-push-action@v5
        with:
          context: variants/smbd-wsdd2
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_version_tag.outputs.smbd_wsdd2_tag }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image - smbd-wsdd2
        if: ${{ steps.docker_version_check.outputs.tag == 'true' }}
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build-and-push-smbd-wsdd2.outputs.digest }}
